package sttp.tapir.typelevel

trait ParamsToTuple[I] {
  type Out
  def toTuple(i: I): Out
}

object ParamsToTuple extends LowPriorityParamsToTuple {

  [2..#implicit def tuple1toTuple[[#A1#]]: Aux[Tuple1[[#A1#]], Tuple1[[#A1#]]] = new ParamsToTuple[Tuple1[[#A1#]]] {
    override type Out = Tuple1[[#A1#]]
    override def toTuple(i: Tuple1[[#A1#]]): Tuple1[[#A1#]] = i
  }#
  ]
}

trait LowPriorityParamsToTuple {
  type Aux[I, T] = ParamsToTuple[I] { type Out = T }

  implicit def singleToTuple[A]: Aux[A, Tuple1[A]] = new ParamsToTuple[A] {
    override type Out = Tuple1[A]
    override def toTuple(i: A): Tuple1[A] = Tuple1(i)
  }
}
